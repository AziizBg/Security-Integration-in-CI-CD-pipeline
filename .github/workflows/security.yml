name: Security Analysis (SAST + SCA)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # ====================================
  # üîç SCA - Software Composition Analysis avec Snyk
  # ====================================
  snyk-scan:
    name: Snyk - Analyse des d√©pendances
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: false  # ‚ùå Bloque le pipeline si vuln√©rabilit√©s
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high  # Bloque sur HIGH et CRITICAL
          command: test

      - name: Upload Snyk results to GitHub Code Scanning
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

  # ====================================
  # üîç SAST - Static Application Security Testing avec CodeQL
  # ====================================
  codeql-analysis:
    name: CodeQL - Analyse statique du code
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'javascript' ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: ${{ matrix.language }}
          queries: security-extended  # Requ√™tes de s√©curit√© avanc√©es

      - name: Autobuild
        uses: github/codeql-action/autobuild@v2

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v2
        with:
          category: "/language:${{matrix.language}}"

  # ====================================
  # üìä V√©rification des vuln√©rabilit√©s npm audit
  # ====================================
  npm-audit:
    name: NPM Audit - V√©rification des vuln√©rabilit√©s
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=high  # Bloque sur HIGH et CRITICAL
        continue-on-error: false  # ‚ùå Bloque le pipeline si vuln√©rabilit√©s

      - name: Generate audit report
        if: failure()
        run: npm audit --json > npm-audit-report.json

      - name: Upload audit report
        if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: npm-audit-report
          path: npm-audit-report.json

  # ====================================
  # ‚úÖ Job final - Tous les checks doivent passer
  # ====================================
  security-gate:
    name: Security Gate - Validation finale
    runs-on: ubuntu-latest
    needs: [snyk-scan, codeql-analysis, npm-audit]
    if: always()

    steps:
      - name: Check if all security scans passed
        run: |
          if [ "${{ needs.snyk-scan.result }}" != "success" ] || \
             [ "${{ needs.codeql-analysis.result }}" != "success" ] || \
             [ "${{ needs.npm-audit.result }}" != "success" ]; then
            echo "‚ùå Security scans failed! Pipeline blocked."
            exit 1
          else
            echo "‚úÖ All security scans passed!"
          fi

      - name: Security validation successful
        run: echo "üéâ Code is secure and ready for deployment!"

