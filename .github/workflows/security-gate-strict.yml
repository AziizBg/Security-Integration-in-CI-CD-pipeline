name: Security Gate - Vulnerability Detection

on:
  pull_request:
    branches: [ main ]

jobs:
  vulnerability-check:
    name: Check for Vulnerable Code Patterns
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Scan for SQL Injection patterns
        run: |
          echo "üîç Scanning for SQL Injection vulnerabilities..."
          if grep -r "SELECT.*FROM.*\${" src/ 2>/dev/null; then
            echo "‚ùå SQL Injection pattern detected in code!"
            echo "VULN_SQL=1" >> $GITHUB_ENV
          else
            echo "‚úÖ No SQL Injection patterns found"
            echo "VULN_SQL=0" >> $GITHUB_ENV
          fi

      - name: Scan for XSS vulnerabilities
        run: |
          echo "üîç Scanning for XSS vulnerabilities..."
          if grep -r "res\.send.*\${" src/ 2>/dev/null; then
            echo "‚ùå XSS vulnerability pattern detected!"
            echo "VULN_XSS=1" >> $GITHUB_ENV
          else
            echo "‚úÖ No XSS patterns found"
            echo "VULN_XSS=0" >> $GITHUB_ENV
          fi

      - name: Scan for hard-coded secrets
        run: |
          echo "üîç Scanning for hard-coded credentials..."
          if grep -ri "password.*:.*['\"]" src/ 2>/dev/null | grep -v "//"; then
            echo "‚ùå Hard-coded credentials detected!"
            echo "VULN_SECRETS=1" >> $GITHUB_ENV
          else
            echo "‚úÖ No hard-coded secrets found"
            echo "VULN_SECRETS=0" >> $GITHUB_ENV
          fi

      - name: Scan for environment variable exposure
        run: |
          echo "üîç Scanning for environment variable exposure..."
          if grep -r "env:.*process\.env[,}]" src/ 2>/dev/null; then
            echo "‚ùå Process.env exposure detected!"
            echo "VULN_ENV=1" >> $GITHUB_ENV
          else
            echo "‚úÖ No env exposure found"
            echo "VULN_ENV=0" >> $GITHUB_ENV
          fi

      - name: Security Gate Decision
        run: |
          TOTAL_VULNS=0
          
          if [ "$VULN_SQL" = "1" ]; then
            TOTAL_VULNS=$((TOTAL_VULNS + 1))
          fi
          
          if [ "$VULN_XSS" = "1" ]; then
            TOTAL_VULNS=$((TOTAL_VULNS + 1))
          fi
          
          if [ "$VULN_SECRETS" = "1" ]; then
            TOTAL_VULNS=$((TOTAL_VULNS + 1))
          fi
          
          if [ "$VULN_ENV" = "1" ]; then
            TOTAL_VULNS=$((TOTAL_VULNS + 1))
          fi
          
          echo ""
          echo "========================================="
          echo "üõ°Ô∏è  SECURITY GATE REPORT"
          echo "========================================="
          echo "SQL Injection: $([ "$VULN_SQL" = "1" ] && echo "‚ùå DETECTED" || echo "‚úÖ OK")"
          echo "XSS: $([ "$VULN_XSS" = "1" ] && echo "‚ùå DETECTED" || echo "‚úÖ OK")"
          echo "Hard-coded Secrets: $([ "$VULN_SECRETS" = "1" ] && echo "‚ùå DETECTED" || echo "‚úÖ OK")"
          echo "Env Exposure: $([ "$VULN_ENV" = "1" ] && echo "‚ùå DETECTED" || echo "‚úÖ OK")"
          echo "========================================="
          echo "Total Vulnerabilities: $TOTAL_VULNS"
          echo "========================================="
          echo ""
          
          if [ $TOTAL_VULNS -gt 0 ]; then
            echo "üö´ SECURITY GATE: BLOCKED"
            echo "Found $TOTAL_VULNS vulnerability pattern(s)."
            echo "Please fix the vulnerabilities before merging this PR."
            exit 1
          else
            echo "‚úÖ SECURITY GATE: PASSED"
            echo "No vulnerabilities detected. Safe to merge!"
          fi

