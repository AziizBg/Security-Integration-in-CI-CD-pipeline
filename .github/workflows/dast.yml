name: DAST - Dynamic Application Security Testing

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # ====================================
  # üöÄ D√©ploiement dans un environnement √©ph√©m√®re
  # ====================================
  deploy-ephemeral:
    name: D√©ployer l'application pour le test
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Start application in background
        run: |
          npm start &
          echo $! > app.pid
          sleep 10  # Attendre que l'app d√©marre

      - name: Wait for application to be ready
        run: |
          timeout 30 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 2; done'
          echo "‚úÖ Application is ready for DAST scanning"

      # ====================================
      # üîç OWASP ZAP - Baseline Scan
      # ====================================
      - name: OWASP ZAP Baseline Scan
        uses: zaproxy/action-baseline@v0.10.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'  # Include alpha rules
          fail_action: true  # ‚ùå Fail le pipeline si vuln√©rabilit√©s trouv√©es
          allow_issue_writing: false

      # ====================================
      # üîç OWASP ZAP - Full Scan (optionnel, plus long)
      # ====================================
      - name: OWASP ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.8.0
        if: github.event_name == 'pull_request'  # Seulement sur les PR
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j'  # Alpha + Ajax Spider
          fail_action: true
          allow_issue_writing: false

      # ====================================
      # üìä Upload des r√©sultats ZAP
      # ====================================
      - name: Upload ZAP results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: zap-scan-results
          path: |
            report_html.html
            report_json.json
            report_md.md

      # ====================================
      # üõë Stop application
      # ====================================
      - name: Stop application
        if: always()
        run: |
          if [ -f app.pid ]; then
            kill $(cat app.pid) || true
          fi

  # ====================================
  # üîç Test des endpoints vuln√©rables (si activ√©s)
  # ====================================
  test-vulnerable-routes:
    name: Tester les routes vuln√©rables
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, '[test-vuln]')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Start application
        run: |
          npm start &
          sleep 10

      - name: Test SQL Injection endpoint
        run: |
          response=$(curl -s http://localhost:3000/vulnerable/user/1)
          echo "Response: $response"
          if echo "$response" | grep -q "SQL Injection"; then
            echo "‚ö†Ô∏è  SQL Injection vulnerability detected!"
            exit 1
          fi

      - name: Test XSS endpoint
        run: |
          response=$(curl -s "http://localhost:3000/vulnerable/search?q=<script>alert('XSS')</script>")
          echo "Response: $response"
          if echo "$response" | grep -q "<script>"; then
            echo "‚ö†Ô∏è  XSS vulnerability detected!"
            exit 1
          fi

      - name: Test debug endpoint (sensitive data exposure)
        run: |
          response=$(curl -s http://localhost:3000/vulnerable/debug)
          echo "Response: $response"
          if echo "$response" | grep -q "dbPassword"; then
            echo "‚ö†Ô∏è  Sensitive data exposure detected!"
            exit 1
          fi

